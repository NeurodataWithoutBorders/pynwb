# Tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist = py37, py38, py39

[testenv]
usedevelop = True
setenv = PYTHONDONTWRITEBYTECODE = 1
install_command =
    pip install -U {opts} {packages}

deps =
    -rrequirements-dev.txt
    -rrequirements.txt

commands =
    pip check  # Check for conflicting packages
    python test.py -v

# Env to create coverage report locally
[testenv:localcoverage]
basepython = python3.9
commands =
    python -m coverage run test.py --pynwb
    coverage html -d tests/coverage/htmlcov

# Test with python 3.9, pinned dev reqs, and upgraded run requirements
[testenv:py39-upgrade-dev]
basepython = python3.9
install_command =
    pip install -U -e . {opts} {packages}
deps =
    -rrequirements-dev.txt
commands = {[testenv]commands}

# Test with python 3.9, pinned dev reqs, and pre-release run requirements
[testenv:py39-upgrade-dev-pre]
basepython = python3.9
install_command =
    pip install -U --pre -e . {opts} {packages}
deps =
    -rrequirements-dev.txt
commands = {[testenv]commands}

# Test with python 3.7, pinned dev reqs, and minimum run requirements
[testenv:py37-min-req]
basepython = python3.7
deps =
    -rrequirements-dev.txt
    -rrequirements-min.txt
commands = {[testenv]commands}

# Envs that builds wheels and source distribution
[testenv:build]
commands =
    python setup.py sdist
    python setup.py bdist_wheel

[testenv:build-py37]
basepython = python3.7
commands = {[testenv:build]commands}

[testenv:build-py38]
basepython = python3.8
commands = {[testenv:build]commands}

[testenv:build-py39]
basepython = python3.9
commands = {[testenv:build]commands}

[testenv:build-py39-upgrade-dev]
basepython = python3.9
install_command =
    pip install -U -e . {opts} {packages}
deps =
    -rrequirements-dev.txt
commands = {[testenv:build]commands}

[testenv:build-py39-upgrade-dev-pre]
basepython = python3.9
install_command =
    pip install -U --pre -e . {opts} {packages}
deps =
    -rrequirements-dev.txt
commands = {[testenv:build]commands}

[testenv:build-py37-min-req]
basepython = python3.7
deps =
    -rrequirements-dev.txt
    -rrequirements-min.txt
commands = {[testenv:build]commands}

# Envs that will test installation from a wheel
[testenv:wheelinstall]
deps = null
commands = python -c "import hdmf"

# Envs that will execute gallery tests
[testenv:gallery]
install_command =
    pip install -U {opts} {packages}

deps =
    -rrequirements-dev.txt
    -rrequirements.txt

commands =
    pip install -r requirements-doc.txt
    # installing allensdk may downgrade certain requirements so
    # reinstall the repo with its requirements
    pip install -r requirements-dev.txt -r requirements.txt
    pip install -U -e .
    python test.py --example

[testenv:gallery-py37]
basepython = python3.7
deps = {[testenv:gallery]deps}
commands = {[testenv:gallery]commands}

[testenv:gallery-py38]
basepython = python3.8
deps = {[testenv:gallery]deps}
commands = {[testenv:gallery]commands}

[testenv:gallery-py39]
basepython = python3.9
deps = {[testenv:gallery]deps}
commands = {[testenv:gallery]commands}

# Test with python 3.9, pinned dev and doc reqs, and upgraded run requirements
[testenv:gallery-py39-upgrade-dev]
basepython = python3.9

install_command =
    pip install -U -e . {opts} {packages}

deps =
    -rrequirements-dev.txt

commands =
    pip install -r requirements-doc.txt
    # installing allensdk may downgrade certain requirements so
    # reinstall the repo with its requirements
    pip install -r requirements-dev.txt -r requirements.txt
    pip install -U -e .
    python test.py --example

# Test with python 3.9, pinned dev and doc reqs, and pre-release run requirements
[testenv:gallery-py39-upgrade-dev-pre]
basepython = python3.9

install_command =
    pip install -U --pre -e . {opts} {packages}

deps =
    -rrequirements-dev.txt

commands =
    pip install -r requirements-doc.txt
    # installing allensdk may downgrade certain requirements so
    # reinstall the repo with its requirements
    pip install -r requirements-dev.txt -r requirements.txt
    pip install -U --pre -e .
    python test.py --example

# Test with python 3.7, pinned dev reqs, and minimum run requirements
[testenv:gallery-py37-min-req]
basepython = python3.7
deps =
    -rrequirements-dev.txt
    -rrequirements-min.txt
commands = {[testenv:gallery]commands}

[testenv:validation-py39]
basepython = python3.9
install_command =
    pip install -U {opts} {packages}
deps =
    -rrequirements-dev.txt
    -rrequirements.txt
    -rrequirements-doc.txt
commands =
    python test.py --validation
