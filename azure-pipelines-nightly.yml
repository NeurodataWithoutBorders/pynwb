trigger: none

pr: none

schedules:
- cron: "0 5 * * *"
  displayName: nightly
  branches:
    include: dev

jobs:

- job: 'Test'
  displayName: "Test PyNWB"

  strategy:
    matrix:
      macOS-py3.9:
        imageName: 'macOS-latest'
        pythonVersion: '3.9'
        testToxEnv: 'py39'
        buildToxEnv: 'build-py39'
        testWheelInstallEnv: 'wheelinstall'

      macOS-py3.9-upgrade-dev-pre:
        imageName: 'macOS-latest'
        pythonVersion: '3.9'
        testToxEnv: 'py39-upgrade-dev-pre'
        buildToxEnv: 'build-py39-upgrade-dev-pre'
        testWheelInstallEnv: 'wheelinstall'

      macOS-py3.9-upgrade-dev:
        imageName: 'macOS-latest'
        pythonVersion: '3.9'
        testToxEnv: 'py39-upgrade-dev'
        buildToxEnv: 'build-py39-upgrade-dev'
        testWheelInstallEnv: 'wheelinstall'

      macOS-py3.8:
        imageName: 'macOS-latest'
        pythonVersion: '3.8'
        testToxEnv: 'py38'
        buildToxEnv: 'build-py38'
        testWheelInstallEnv: 'wheelinstall'

      macOS-py3.7:
        imageName: 'macOS-latest'
        pythonVersion: '3.7'
        testToxEnv: 'py37'
        buildToxEnv: 'build-py37'
        testWheelInstallEnv: 'wheelinstall'

      macOS-py3.7-min-req:
        imageName: 'macOS-latest'
        pythonVersion: '3.7'
        testToxEnv: 'py37-min-req'
        buildToxEnv: 'build-py37-min-req'
        testWheelInstallEnv: 'wheelinstall'

      Windows-py3.9:
        imageName: 'windows-latest'
        pythonVersion: '3.9'
        testToxEnv: 'py39'
        buildToxEnv: 'build-py39'
        testWheelInstallEnv: 'wheelinstall'

      Windows-py3.9-upgrade-dev-pre:
        imageName: 'windows-latest'
        pythonVersion: '3.9'
        testToxEnv: 'py39-upgrade-dev-pre'
        buildToxEnv: 'build-py39-upgrade-dev-pre'
        testWheelInstallEnv: 'wheelinstall'

      Windows-py3.9-upgrade-dev:
        imageName: 'windows-latest'
        pythonVersion: '3.9'
        testToxEnv: 'py39-upgrade-dev'
        buildToxEnv: 'build-py39-upgrade-dev'
        testWheelInstallEnv: 'wheelinstall'

      Windows-py3.8:
        imageName: 'windows-latest'
        pythonVersion: '3.8'
        testToxEnv: 'py38'
        buildToxEnv: 'build-py38'
        testWheelInstallEnv: 'wheelinstall'

      Windows-py3.7:
        imageName: 'windows-latest'
        pythonVersion: '3.7'
        testToxEnv: 'py37'
        buildToxEnv: 'build-py37'
        testWheelInstallEnv: 'wheelinstall'

      Windows-py3.7-min-req:
        imageName: 'windows-latest'
        pythonVersion: '3.7'
        testToxEnv: 'py37-min-req'
        buildToxEnv: 'build-py37-min-req'
        testWheelInstallEnv: 'wheelinstall'

  pool:
    vmImage: $(imageName)

  steps:

  - checkout: self
    submodules: true

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      python -m pip install --upgrade setuptools
      python -m pip install setuptools wheel virtualenv tox
    displayName: 'Install build dependencies'

  - bash: |
      tox -e $(testToxEnv)
    displayName: 'Run tox tests'

  - bash: |
      tox -e $(buildToxEnv)
    displayName: 'Run build tests'

  - bash: |
      tox -e $(testWheelInstallEnv) --recreate --installpkg dist/*-none-any.whl
    displayName: 'Run wheel install tests'


- job: 'Test_ROS3_Windows'
  displayName: "Test PyNWB with Conda and ROS3 on Windows"

  pool:
    vmImage: 'windows-latest'

  steps:

  - checkout: self
    submodules: true

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: 'Add conda to PATH'

  - powershell: conda env create -f environment-ros3.yml
    displayName: 'Create conda environment'

  - script: |
      call activate ros3
      pip install -r requirements-dev.txt
      pip install -e .
    displayName: 'Install PyNWB and dependencies'

  - script: |
      call activate ros3
      python test.py --ros3
    displayName: 'Run ROS3 tests'


- job: 'Test_ROS3_macOS'
  displayName: "Test PyNWB with Conda and ROS3 on macOS"

  pool:
    vmImage: 'macos-latest'

  steps:

  - checkout: self
    submodules: true

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      architecture: 'x64'

  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
      sudo chown -R $USER $CONDA  # Take ownership of conda installation
    displayName: 'Add conda to PATH'

  - bash: |
      conda env create -f environment-ros3.yml
      source activate ros3
      pip install -r requirements-dev.txt
      pip install -e .
    displayName: 'Create conda environment and install PyNWB and dependencies'

  - bash: |
      source activate ros3
      python test.py --ros3
    displayName: 'Run ROS3 tests'
