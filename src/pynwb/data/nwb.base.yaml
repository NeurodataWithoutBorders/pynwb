datasets:
- attributes:
  - doc: Short description of what this type of Interface contains.
    dtype: text
    name: help
  doc: The attributes specified here are included in all interfaces.
  neurodata_type_def: NWBData
- attributes:
  - doc: Value is 'One of many columns that can be added to a DynamicTable'
    dtype: text
    value: One of many columns that can be added to a DynamicTable
    name: help
  - doc: A short description of what this column stores
    dtype: text
    name: description
  doc: The attributes specified here are included in all interfaces.
  neurodata_type_def: TableColumn
  neurodata_type_inc: NWBData
- default_name: vector_data
  attributes:
  - doc: a help string
    dtype: text
    name: help
    value: Values for a list of elements
  doc: Data values indexed by pointer
  neurodata_type_def: VectorData
  neurodata_type_inc: NWBData
- default_name: vector_index
  attributes:
  - doc: a help string
    dtype: text
    name: help
    value: indexes into a list of values for a list of elements
  doc: Pointers that index data values
  dtype:
    target_type: VectorData
    reftype: region
  shape:
  - null
  neurodata_type_def: VectorIndex
  neurodata_type_inc: NWBData
- default_name: element_id
  attributes:
  - doc: a help string
    dtype: text
    name: help
    value: unique identifiers for a list of elements
  doc: a unique identifier for each element
  dtype: int
  shape:
  - null
  neurodata_type_def: ElementIdentifiers
  neurodata_type_inc: NWBData
groups:
- attributes:
  - doc: Short description of what this type of NWBContainer contains.
    dtype: text
    name: help
  - doc: Path to the origin of the data represented in this interface.
    dtype: text
    name: source
  doc: The attributes specified here are included in all interfaces.
  neurodata_type_def: NWBContainer
- doc: An abstract data type for differentiating experimental data from metadata
  neurodata_type_inc: NWBContainer
  neurodata_type_def: NWBDataInterface
- attributes:
  - default_value: no comments
    doc: Human-readable comments about the TimeSeries. This second descriptive field
      can be used to store additional information, or descriptive information if the
      primary description field is populated with a computer-readable string.
    dtype: text
    name: comments
    required: false
  - default_value: no description
    doc: Description of TimeSeries
    dtype: text
    name: description
    required: false
  - doc: Value is 'General time series object'
    dtype: text
    name: help
    value: General time series object
  - doc: Name of TimeSeries or Modules that serve as the source for the data contained
      here. It can also be the name of a device, for stimulus or acquisition data
    dtype: text
    name: source
  datasets:
  - dims:
    - num_times
    doc: 'Numerical labels that apply to each element in data[]. COMMENT: Optional
      field. If present, the control array should have the same number of elements
      as data[].'
    dtype: uint8
    name: control
    quantity: '?'
    shape:
    - null
  - dims:
    - num_control_values
    doc: 'Description of each control value. COMMENT: Array length should be as long
      as the highest number in control minus one, generating an zero-based indexed
      array for control values.'
    dtype: text
    name: control_description
    quantity: '?'
    shape:
    - null
  - attributes:
    - default_value: 1.0
      doc: Scalar to multiply each element in data to convert it to the specified
        unit
      dtype: float32
      name: conversion
      required: false
    - default_value: 0.0
      doc: 'Smallest meaningful difference between values in data, stored in the specified
        by unit. COMMENT: E.g., the change in value of the least significant bit,
        or a larger number if signal noise is known to be present. If unknown, use
        NaN'
      dtype: float32
      name: resolution
      required: false
    - doc: "The base unit of measure used to store data. This should be in the SI\
        \ unit. COMMENT: This is the SI unit (when appropriate) of the stored data,\
        \ such as Volts. If the actual data is stored in millivolts, the field 'conversion'\
        \ below describes how to convert the data to the specified SI unit."
      dtype: text
      name: unit
    dims:
    - num_times
    doc: 'Data values. Can also store binary data (eg, image frames) COMMENT: This
      field may be a link to data stored in an external file, especially in the case
      of raw data.'
    name: data
    shape:
    - null
  - attributes:
    - doc: 'Sampling rate, in Hz COMMENT: Rate information is stored in Hz'
      dtype: float32
      name: rate
    - doc: Value is 'Seconds'
      dtype: text
      name: unit
      value: Seconds
    doc: 'The timestamp of the first sample. COMMENT: When timestamps are uniformly
      spaced, the timestamp of the first sample can be specified and all subsequent
      ones calculated from the sampling rate.'
    dtype: float64
    name: starting_time
    quantity: '?'
  - attributes:
    - doc: Value is '1'
      dtype: int32
      name: interval
      value: 1
    - doc: Value is 'Seconds'
      dtype: text
      name: unit
      value: Seconds
    dims:
    - num_times
    doc: 'Timestamps for samples stored in data.COMMENT: Timestamps here have all
      been corrected to the common experiment master-clock. Time is stored as seconds
      and all timestamps are relative to experiment start time.'
    dtype: float64
    name: timestamps
    quantity: '?'
    shape:
    - null
  doc: General purpose time series.
  groups:
  - doc: "Lab specific time and sync information as provided directly from hardware\
      \ devices and that is necessary for aligning all acquired time information to\
      \ a common timebase. The timestamp array stores time in the common timebase.\
      \ COMMENT: This group will usually only be populated in TimeSeries that are\
      \ stored external to the NWB file, in files storing raw data. Once timestamp\
      \ data is calculated, the contents of 'sync' are mostly for archival purposes."
    name: sync
    quantity: '?'
  neurodata_type_def: TimeSeries
  neurodata_type_inc: NWBDataInterface
- attributes:
  - doc: Description of Module
    dtype: text
    name: description
  - doc: Value is 'A collection of analysis outputs from processing of data'
    dtype: text
    name: help
    value: A collection of analysis outputs from processing of data
  doc: Module.  Name should be descriptive. Stores a collection of related data organized
    by contained interfaces.  Each interface is a contract specifying content related
    to a particular type of data.
  groups:
  - doc: Interface objects containing data output from processing steps
    neurodata_type_inc: NWBDataInterface
    quantity: '*'
  neurodata_type_def: ProcessingModule
  neurodata_type_inc: NWBContainer
- attributes:
  - doc: Description of images in this container
    dtype: text
    name: description
  - doc: Value is 'A collection of images that have some meaningful relationship'
    dtype: text
    name: help
    value: A collection of images that have some meaningful relationship
  datasets:
    - doc: Images stored in this NWBDataInterface
      neurodata_type_inc: Image
      quantity: '+'
  default_name: Images
  doc: A NWBDataInterface for storing images that have some relationship
  neurodata_type_def: Images
  neurodata_type_inc: NWBDataInterface
- attributes:
  - doc: Value is 'A column-centric table'
    dtype: text
    name: help
    value: A column-centric table
  - doc: The names of the columns in this table. This should be used to specifying an order to the columns
    dtype: text
    name: colnames
    shape:
      - null
  - doc: Description of what is in this dynamic table
    dtype: text
    name: description
  datasets:
    - name: id
      neurodata_type_inc: ElementIdentifiers
      doc: The unique identifier for the rows in this dynamic table
      dtype: int
      shape:
        - null
    - doc: The columns in this dynamic table
      neurodata_type_inc: TableColumn
      quantity: '*'
  doc: A group containing multiple datasets that are aligned on the first dimension (Currently, this requirement
    if left up to APIs to check and enforce). Apart from a column that contains unique identifiers for each row
    there are no other required datasets. Users are free to add any number of TableColumn objects here. Table
    functionality is already supported through compound types, which is analogous to storing an array-of-structs.
    DynamicTable can be thought of as a struct-of-arrays. This provides an alternative structure to choose from
    when optimizing storage for anticipated access patterns. Additionally, this type provides a way of creating a
    table without having to define a compound type up front. Although this convenience may be attractive, users
    should think carefully about how data will be accessed. DynamicTable is more appropriate for column-centric
    access, whereas a dataset with a compound type would be more appropriate for row-centric access. Finally,
    data size should also be taken into account. For small tables, performance loss may be an acceptable trade-off
    for the flexibility of a DynamicTable. For example, DynamicTable was originally developed for storing trial
    data and spike unit metadata. Both of these use cases are expected to produce relatively small tables, so
    the spatial locality of multiple datasets present in a DynamicTable is not expected to have a significant performance
    impact. Additionally, requirements of trial and unit metadata tables are sufficiently diverse that performance
    implications can be overlooked in favor of usability.
  neurodata_type_def: DynamicTable
  neurodata_type_inc: NWBDataInterface
