["{\"groups\":[{\"datasets\":[{\"shape\":[[null],[null,null]],\"dims\":[[\"num_times\"],[\"num_times\",\"num_features\"]],\"dtype\":\"numeric\",\"doc\":\"Values of each feature at each time.\",\"name\":\"data\",\"attributes\":[{\"doc\":\"Since there can be different units for different features, store the units in 'feature_units'. The default value for this attribute is \\\"see 'feature_units'\\\".\",\"name\":\"unit\",\"required\":false,\"dtype\":\"text\",\"default_value\":\"see 'feature_units'\"},{\"doc\":\"Scalar to multiply each element in data to convert it to the specified 'unit'. If the data are stored in acquisition system units or other units that require a conversion to be interpretable, multiply the data by 'conversion' to convert the data to the specified 'unit'. e.g. if the data acquisition system stores values in this object as signed 16-bit integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion' multiplier to get from raw data acquisition values to recorded volts is 2.5/32768/8000 = 9.5367e-9.\",\"name\":\"conversion\",\"required\":false,\"dtype\":\"float32\",\"default_value\":1.0},{\"doc\":\"Scalar to add to the data after scaling by 'conversion' to finalize its coercion to the specified 'unit'. Two common examples of this include (a) data stored in an unsigned type that requires a shift after scaling to re-center the data, and (b) specialized recording devices that naturally cause a scalar offset with respect to the true units.\",\"name\":\"offset\",\"required\":false,\"dtype\":\"float32\",\"default_value\":0.0},{\"doc\":\"Smallest meaningful difference between values in data, stored in the specified by unit, e.g., the change in value of the least significant bit, or a larger number if signal noise is known to be present. If unknown, use -1.0.\",\"name\":\"resolution\",\"required\":false,\"dtype\":\"float32\",\"default_value\":-1.0},{\"doc\":\"Optionally describe the continuity of the data. Can be \\\"continuous\\\", \\\"instantaneous\\\", or \\\"step\\\". For example, a voltage trace would be \\\"continuous\\\", because samples are recorded from a continuous process. An array of lick times would be \\\"instantaneous\\\", because the data represents distinct moments in time. Times of image presentations would be \\\"step\\\" because the picture remains the same until the next timepoint. This field is optional, but is useful in providing information about the underlying data. It may inform the way this data is interpreted, the way it is visualized, and what analysis methods are applicable.\",\"name\":\"continuity\",\"required\":false,\"dtype\":\"text\"}]},{\"shape\":[null],\"dims\":[\"num_features\"],\"dtype\":\"text\",\"doc\":\"Units of each feature.\",\"name\":\"feature_units\",\"quantity\":\"?\"},{\"shape\":[null],\"dims\":[\"num_features\"],\"dtype\":\"text\",\"doc\":\"Description of the features represented in TimeSeries::data.\",\"name\":\"features\"}],\"doc\":\"Abstract features, such as quantitative descriptions of sensory stimuli. The TimeSeries::data field is a 2D array, storing those features (e.g., for visual grating stimulus this might be orientation, spatial frequency and contrast). Null stimuli (eg, uniform gray) can be marked as being an independent feature (eg, 1.0 for gray, 0.0 for actual stimulus) or by storing NaNs for feature values, or through use of the TimeSeries::control fields. A set of features is considered to persist until the next set of features is defined. The final set of features stored should be the null set. This is useful when storing the raw stimulus is impractical.\",\"neurodata_type_inc\":\"TimeSeries\",\"neurodata_type_def\":\"AbstractFeatureSeries\"},{\"datasets\":[{\"shape\":[null],\"dims\":[\"num_times\"],\"dtype\":\"text\",\"doc\":\"Annotations made during an experiment.\",\"name\":\"data\",\"attributes\":[{\"doc\":\"Smallest meaningful difference between values in data. Annotations have no units, so the value is fixed to -1.0.\",\"name\":\"resolution\",\"dtype\":\"float32\",\"value\":-1.0},{\"doc\":\"Base unit of measurement for working with the data. Annotations have no units, so the value is fixed to 'n/a'.\",\"name\":\"unit\",\"dtype\":\"text\",\"value\":\"n/a\"},{\"doc\":\"Scalar to multiply each element in data to convert it to the specified 'unit'. If the data are stored in acquisition system units or other units that require a conversion to be interpretable, multiply the data by 'conversion' to convert the data to the specified 'unit'. e.g. if the data acquisition system stores values in this object as signed 16-bit integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion' multiplier to get from raw data acquisition values to recorded volts is 2.5/32768/8000 = 9.5367e-9.\",\"name\":\"conversion\",\"required\":false,\"dtype\":\"float32\",\"default_value\":1.0},{\"doc\":\"Scalar to add to the data after scaling by 'conversion' to finalize its coercion to the specified 'unit'. Two common examples of this include (a) data stored in an unsigned type that requires a shift after scaling to re-center the data, and (b) specialized recording devices that naturally cause a scalar offset with respect to the true units.\",\"name\":\"offset\",\"required\":false,\"dtype\":\"float32\",\"default_value\":0.0},{\"doc\":\"Optionally describe the continuity of the data. Can be \\\"continuous\\\", \\\"instantaneous\\\", or \\\"step\\\". For example, a voltage trace would be \\\"continuous\\\", because samples are recorded from a continuous process. An array of lick times would be \\\"instantaneous\\\", because the data represents distinct moments in time. Times of image presentations would be \\\"step\\\" because the picture remains the same until the next timepoint. This field is optional, but is useful in providing information about the underlying data. It may inform the way this data is interpreted, the way it is visualized, and what analysis methods are applicable.\",\"name\":\"continuity\",\"required\":false,\"dtype\":\"text\"}]}],\"doc\":\"Stores user annotations made during an experiment. The data[] field stores a text array, and timestamps are stored for each annotation (ie, interval=1). This is largely an alias to a standard TimeSeries storing a text array but that is identifiable as storing annotations in a machine-readable way.\",\"neurodata_type_inc\":\"TimeSeries\",\"neurodata_type_def\":\"AnnotationSeries\"},{\"datasets\":[{\"shape\":[null],\"dims\":[\"num_times\"],\"dtype\":\"int8\",\"doc\":\"Use values >0 if interval started, <0 if interval ended.\",\"name\":\"data\",\"attributes\":[{\"doc\":\"Smallest meaningful difference between values in data. Annotations have no units, so the value is fixed to -1.0.\",\"name\":\"resolution\",\"dtype\":\"float32\",\"value\":-1.0},{\"doc\":\"Base unit of measurement for working with the data. Annotations have no units, so the value is fixed to 'n/a'.\",\"name\":\"unit\",\"dtype\":\"text\",\"value\":\"n/a\"},{\"doc\":\"Scalar to multiply each element in data to convert it to the specified 'unit'. If the data are stored in acquisition system units or other units that require a conversion to be interpretable, multiply the data by 'conversion' to convert the data to the specified 'unit'. e.g. if the data acquisition system stores values in this object as signed 16-bit integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion' multiplier to get from raw data acquisition values to recorded volts is 2.5/32768/8000 = 9.5367e-9.\",\"name\":\"conversion\",\"required\":false,\"dtype\":\"float32\",\"default_value\":1.0},{\"doc\":\"Scalar to add to the data after scaling by 'conversion' to finalize its coercion to the specified 'unit'. Two common examples of this include (a) data stored in an unsigned type that requires a shift after scaling to re-center the data, and (b) specialized recording devices that naturally cause a scalar offset with respect to the true units.\",\"name\":\"offset\",\"required\":false,\"dtype\":\"float32\",\"default_value\":0.0},{\"doc\":\"Optionally describe the continuity of the data. Can be \\\"continuous\\\", \\\"instantaneous\\\", or \\\"step\\\". For example, a voltage trace would be \\\"continuous\\\", because samples are recorded from a continuous process. An array of lick times would be \\\"instantaneous\\\", because the data represents distinct moments in time. Times of image presentations would be \\\"step\\\" because the picture remains the same until the next timepoint. This field is optional, but is useful in providing information about the underlying data. It may inform the way this data is interpreted, the way it is visualized, and what analysis methods are applicable.\",\"name\":\"continuity\",\"required\":false,\"dtype\":\"text\"}]}],\"doc\":\"Stores intervals of data. The timestamps field stores the beginning and end of intervals. The data field stores whether the interval just started (>0 value) or ended (<0 value). Different interval types can be represented in the same series by using multiple key values (eg, 1 for feature A, 2 for feature B, 3 for feature C, etc). The field data stores an 8-bit integer. This is largely an alias of a standard TimeSeries but that is identifiable as representing time intervals in a machine-readable way.\",\"neurodata_type_inc\":\"TimeSeries\",\"neurodata_type_def\":\"IntervalSeries\"},{\"groups\":[{\"datasets\":[{\"dtype\":\"text\",\"doc\":\"Name of the band, e.g. theta.\",\"name\":\"band_name\",\"neurodata_type_inc\":\"VectorData\"},{\"shape\":[null,2],\"dims\":[\"num_bands\",\"low, high\"],\"dtype\":\"float32\",\"doc\":\"Low and high limit of each band in Hz. If it is a Gaussian filter, use 2 SD on either side of the center.\",\"name\":\"band_limits\",\"neurodata_type_inc\":\"VectorData\"},{\"shape\":[null],\"dims\":[\"num_bands\"],\"dtype\":\"float32\",\"doc\":\"The mean Gaussian filters, in Hz.\",\"name\":\"band_mean\",\"neurodata_type_inc\":\"VectorData\"},{\"shape\":[null],\"dims\":[\"num_bands\"],\"dtype\":\"float32\",\"doc\":\"The standard deviation of Gaussian filters, in Hz.\",\"name\":\"band_stdev\",\"neurodata_type_inc\":\"VectorData\"}],\"doc\":\"Table for describing the bands that this series was generated from. There should be one row in this table for each band.\",\"name\":\"bands\",\"neurodata_type_inc\":\"DynamicTable\"}],\"datasets\":[{\"shape\":[null,null,null],\"dims\":[\"num_times\",\"num_channels\",\"num_bands\"],\"dtype\":\"numeric\",\"doc\":\"Data decomposed into frequency bands.\",\"name\":\"data\",\"attributes\":[{\"doc\":\"Base unit of measurement for working with the data. Actual stored values are not necessarily stored in these units. To access the data in these units, multiply 'data' by 'conversion'.\",\"name\":\"unit\",\"required\":false,\"dtype\":\"text\",\"default_value\":\"no unit\"},{\"doc\":\"Scalar to multiply each element in data to convert it to the specified 'unit'. If the data are stored in acquisition system units or other units that require a conversion to be interpretable, multiply the data by 'conversion' to convert the data to the specified 'unit'. e.g. if the data acquisition system stores values in this object as signed 16-bit integers (int16 range -32,768 to 32,767) that correspond to a 5V range (-2.5V to 2.5V), and the data acquisition system gain is 8000X, then the 'conversion' multiplier to get from raw data acquisition values to recorded volts is 2.5/32768/8000 = 9.5367e-9.\",\"name\":\"conversion\",\"required\":false,\"dtype\":\"float32\",\"default_value\":1.0},{\"doc\":\"Scalar to add to the data after scaling by 'conversion' to finalize its coercion to the specified 'unit'. Two common examples of this include (a) data stored in an unsigned type that requires a shift after scaling to re-center the data, and (b) specialized recording devices that naturally cause a scalar offset with respect to the true units.\",\"name\":\"offset\",\"required\":false,\"dtype\":\"float32\",\"default_value\":0.0},{\"doc\":\"Smallest meaningful difference between values in data, stored in the specified by unit, e.g., the change in value of the least significant bit, or a larger number if signal noise is known to be present. If unknown, use -1.0.\",\"name\":\"resolution\",\"required\":false,\"dtype\":\"float32\",\"default_value\":-1.0},{\"doc\":\"Optionally describe the continuity of the data. Can be \\\"continuous\\\", \\\"instantaneous\\\", or \\\"step\\\". For example, a voltage trace would be \\\"continuous\\\", because samples are recorded from a continuous process. An array of lick times would be \\\"instantaneous\\\", because the data represents distinct moments in time. Times of image presentations would be \\\"step\\\" because the picture remains the same until the next timepoint. This field is optional, but is useful in providing information about the underlying data. It may inform the way this data is interpreted, the way it is visualized, and what analysis methods are applicable.\",\"name\":\"continuity\",\"required\":false,\"dtype\":\"text\"}]},{\"dtype\":\"text\",\"doc\":\"The metric used, e.g. phase, amplitude, power.\",\"name\":\"metric\"},{\"doc\":\"DynamicTableRegion pointer to the channels that this decomposition series was generated from.\",\"name\":\"source_channels\",\"quantity\":\"?\",\"neurodata_type_inc\":\"DynamicTableRegion\"}],\"links\":[{\"doc\":\"Link to TimeSeries object that this data was calculated from. Metadata about electrodes and their position can be read from that ElectricalSeries so it is not necessary to store that information here.\",\"name\":\"source_timeseries\",\"target_type\":\"TimeSeries\",\"quantity\":\"?\"}],\"doc\":\"Spectral analysis of a time series, e.g. of an LFP or a speech signal.\",\"neurodata_type_inc\":\"TimeSeries\",\"neurodata_type_def\":\"DecompositionSeries\"},{\"datasets\":[{\"doc\":\"Index into the spike_times dataset.\",\"name\":\"spike_times_index\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorIndex\"},{\"dtype\":\"float64\",\"doc\":\"Spike times for each unit in seconds.\",\"name\":\"spike_times\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorData\",\"attributes\":[{\"doc\":\"The smallest possible difference between two spike times. Usually 1 divided by the acquisition sampling rate from which spike times were extracted, but could be larger if the acquisition time series was downsampled or smaller if the acquisition time series was smoothed/interpolated and it is possible for the spike time to be between samples.\",\"name\":\"resolution\",\"required\":false,\"dtype\":\"float64\"}]},{\"doc\":\"Index into the obs_intervals dataset.\",\"name\":\"obs_intervals_index\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorIndex\"},{\"shape\":[null,2],\"dims\":[\"num_intervals\",\"start|end\"],\"dtype\":\"float64\",\"doc\":\"Observation intervals for each unit.\",\"name\":\"obs_intervals\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorData\"},{\"doc\":\"Index into electrodes.\",\"name\":\"electrodes_index\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorIndex\"},{\"doc\":\"Electrode that each spike unit came from, specified using a DynamicTableRegion.\",\"name\":\"electrodes\",\"quantity\":\"?\",\"neurodata_type_inc\":\"DynamicTableRegion\"},{\"dtype\":{\"target_type\":\"ElectrodeGroup\",\"reftype\":\"object\"},\"doc\":\"Electrode group that each spike unit came from.\",\"name\":\"electrode_group\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorData\"},{\"shape\":[[null,null],[null,null,null]],\"dims\":[[\"num_units\",\"num_samples\"],[\"num_units\",\"num_samples\",\"num_electrodes\"]],\"dtype\":\"float32\",\"doc\":\"Spike waveform mean for each spike unit.\",\"name\":\"waveform_mean\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorData\",\"attributes\":[{\"doc\":\"Sampling rate, in hertz.\",\"name\":\"sampling_rate\",\"required\":false,\"dtype\":\"float32\"},{\"doc\":\"Unit of measurement. This value is fixed to 'volts'.\",\"name\":\"unit\",\"dtype\":\"text\",\"value\":\"volts\"}]},{\"shape\":[[null,null],[null,null,null]],\"dims\":[[\"num_units\",\"num_samples\"],[\"num_units\",\"num_samples\",\"num_electrodes\"]],\"dtype\":\"float32\",\"doc\":\"Spike waveform standard deviation for each spike unit.\",\"name\":\"waveform_sd\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorData\",\"attributes\":[{\"doc\":\"Sampling rate, in hertz.\",\"name\":\"sampling_rate\",\"required\":false,\"dtype\":\"float32\"},{\"doc\":\"Unit of measurement. This value is fixed to 'volts'.\",\"name\":\"unit\",\"dtype\":\"text\",\"value\":\"volts\"}]},{\"shape\":[null,null],\"dims\":[\"num_waveforms\",\"num_samples\"],\"dtype\":\"numeric\",\"doc\":\"Individual waveforms for each spike on each electrode. This is a doubly indexed column. The 'waveforms_index' column indexes which waveforms in this column belong to the same spike event for a given unit, where each waveform was recorded from a different electrode. The 'waveforms_index_index' column indexes the 'waveforms_index' column to indicate which spike events belong to a given unit. For example, if the 'waveforms_index_index' column has values [2, 5, 6], then the first 2 elements of the 'waveforms_index' column correspond to the 2 spike events of the first unit, the next 3 elements of the 'waveforms_index' column correspond to the 3 spike events of the second unit, and the next 1 element of the 'waveforms_index' column corresponds to the 1 spike event of the third unit. If the 'waveforms_index' column has values [3, 6, 8, 10, 12, 13], then the first 3 elements of the 'waveforms' column contain the 3 spike waveforms that were recorded from 3 different electrodes for the first spike time of the first unit. See https://nwb-schema.readthedocs.io/en/stable/format_description.html#doubly-ragged-arrays for a graphical representation of this example. When there is only one electrode for each unit (i.e., each spike time is associated with a single waveform), then the 'waveforms_index' column will have values 1, 2, ..., N, where N is the number of spike events. The number of electrodes for each spike event should be the same within a given unit. The 'electrodes' column should be used to indicate which electrodes are associated with each unit, and the order of the waveforms within a given unit x spike event should be in the same order as the electrodes referenced in the 'electrodes' column of this table. The number of samples for each waveform must be the same.\",\"name\":\"waveforms\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorData\",\"attributes\":[{\"doc\":\"Sampling rate, in hertz.\",\"name\":\"sampling_rate\",\"required\":false,\"dtype\":\"float32\"},{\"doc\":\"Unit of measurement. This value is fixed to 'volts'.\",\"name\":\"unit\",\"dtype\":\"text\",\"value\":\"volts\"}]},{\"doc\":\"Index into the waveforms dataset. One value for every spike event. See 'waveforms' for more detail.\",\"name\":\"waveforms_index\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorIndex\"},{\"doc\":\"Index into the waveforms_index dataset. One value for every unit (row in the table). See 'waveforms' for more detail.\",\"name\":\"waveforms_index_index\",\"quantity\":\"?\",\"neurodata_type_inc\":\"VectorIndex\"}],\"doc\":\"Data about spiking units. Event times of observed units (e.g. cell, synapse, etc.) should be concatenated and stored in spike_times.\",\"default_name\":\"Units\",\"neurodata_type_inc\":\"DynamicTable\",\"neurodata_type_def\":\"Units\"}]}","|O",[1]]